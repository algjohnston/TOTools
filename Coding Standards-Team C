0. (All C# coding standards are implied)
1. Classes that represent individual tables will end with the word "Table"
    * ITable
    * PlayerTable
2. All content pages will end with the word "Page"
    * HomePage
    * LogInPage
3. All Popups will end with the word "Popup"
    * EventPopup
4. All indents will be 4 spaces
    *   hahahaha    look at these spaces    yippee
    * if (isSilly)
      {
          return;
      }
5. All single-line comments in C# will appear to the right of whatever they are commenting on
    * private const string PlayerRankingColumn = "ranking"; // needs a better name
6. All multi-line comments in C# will appear above whatever they are commenting on
    * // To ensure the columns in between the names have the lines connecting players,
      // an extra column in between is used.
      //          v--------- column with lines 
      // |  0  |  1  |  2  |
      // | name --|
      // |        |-- name |
      // | name --|
      // The extra column is for the winner's name
      var numberOfColumns = (2 * (int)Math.Log(numberOfPlayers, 2)) + 1;
7. All lines of text should be at most or equal to 120 characters (not including comments).
    *  asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfaasdlineendshere
8. Assignment statements should all be a maximum of one statement/assignment per line.
    *  int x = 4; 
       int y = 3;
       int z = 7;
9. Initialization of any "container" types (List, Collections, etc.) with more than one element will be formatted with 
   each element on a new line after the bracket as follows: 
    *  public ObservableCollection<string> StartTime { get; } = [
           "Player 1 Time", 
           "Player 2 Time", 
           "Player 3 Time", 
           "Player 4 Time", 
           "Player 5 Time",
           "Player 6 Time",
           "Player 7 Time", 
           "Player 8 Time"
       ];
10. Any planned additions or deletions will be marked with a //TODO comment.
    *  //TODO
11. Boolean methods should all be named with "Is" or "Are" preceding the statement.
    *  public bool IsBooleanMethod {
           return true;
       }
    *  public bool AreBooleanMethods {
           return true;
       }
12. Any and all abbreviations should be obvious.
    *  doubleElim()
13. Avoid variable type-specific names.
    *  getTag()  NOT  getString()
14. If methods and classes have 5 or more parameters, list them on seperate lines.
    *  public class Event(
           long event,
           string eventName,
           string location,
           ...
           ...)
       {
15. EventHandlers for UI pages should all be named with "On" preceding the statement.
    *  OnLoginButtonClicked() {
           ...
       }
16. Non-mutated, read-only properties should not have a setter
    *  public string PlayerName { get; }
